import requests
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ConversationHandler, MessageHandler, ContextTypes, filters
from db.users import get_token
from config import API_URL
from handlers.keyboards import get_main_keyboard, get_welcome_keyboard

WC_NAME, WC_DESCRIPTION, WC_ISFREE, WC_FEATURES, WC_LOCATION, WC_PHOTO, WC_CONFIRM = range(7)

def get_cancel_keyboard():
    return ReplyKeyboardMarkup([["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]], resize_keyboard=True, one_time_keyboard=True)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_keyboard())
    return ConversationHandler.END

async def add_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    token = get_token(user_id)
    if not token:
        await update.message.reply_text(
            "–©–æ–± –¥–æ–¥–∞—Ç–∏ –≤–±–∏—Ä–∞–ª—å–Ω—é, —É–≤—ñ–π–¥—ñ—Ç—å –∞–±–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å.",
            reply_markup=get_welcome_keyboard()
        )
        return ConversationHandler.END
    await update.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–±–∏—Ä–∞–ª—å–Ω—ñ:",
        reply_markup=get_cancel_keyboard()
    )
    return WC_NAME

async def add_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        return await cancel(update, context)
    context.user_data['wc_name'] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å:",
        reply_markup=get_cancel_keyboard()
    )
    return WC_DESCRIPTION

async def add_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        return await cancel(update, context)
    context.user_data['wc_description'] = update.message.text
    await update.message.reply_text(
        "–í–±–∏—Ä–∞–ª—å–Ω—è –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞?",
        reply_markup=ReplyKeyboardMarkup(
            [["‚úÖ –¢–∞–∫", "‚ùå –ù—ñ"], ["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    return WC_ISFREE

async def add_isfree(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        return await cancel(update, context)
    text = update.message.text.strip()
    if text == "‚úÖ –¢–∞–∫":
        context.user_data['wc_isfree'] = True
    elif text == "‚ùå –ù—ñ":
        context.user_data['wc_isfree'] = False
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –∫–Ω–æ–ø–∫–æ—é.", reply_markup=ReplyKeyboardMarkup(
            [["‚úÖ –¢–∞–∫", "‚ùå –ù—ñ"], ["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]],
            resize_keyboard=True, one_time_keyboard=True))
        return WC_ISFREE
    await update.message.reply_text(
        "–í–∫–∞–∂—ñ—Ç—å –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ (—á–µ—Ä–µ–∑ –∫–æ–º—É), –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \"–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏\":",
        reply_markup=ReplyKeyboardMarkup([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"], ["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]], resize_keyboard=True, one_time_keyboard=True)
    )
    return WC_FEATURES

async def add_features(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        return await cancel(update, context)
    if update.message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        context.user_data['wc_features'] = {}
    else:
        features = [s.strip() for s in update.message.text.split(",") if s.strip()]
        context.user_data['wc_features'] = {
            f"feature{i+1}": feat for i, feat in enumerate(features)
        }
    await update.message.reply_text(
        "üìç –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –≤–±–∏—Ä–∞–ª—å–Ω—ñ (–∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ):",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)], ["‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    return WC_LOCATION

async def add_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        return await cancel(update, context)
    if update.message.location:
        lat = update.message.location.latitude
        lng = update.message.location.longitude
        context.user_data['wc_lat'] = lat
        context.user_data['wc_lng'] = lng
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∫–Ω–æ–ø–∫–æ—é.")
        return WC_LOCATION
    await update.message.reply_text(
        "üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –≤–±–∏—Ä–∞–ª—å–Ω—ñ (–æ–±–æ–≤'—è–∑–∫–æ–≤–æ):",
        reply_markup=get_cancel_keyboard()
    )
    return WC_PHOTO

async def add_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        return await cancel(update, context)
    if not update.message.photo:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∞–º–µ —Ñ–æ—Ç–æ –≤–±–∏—Ä–∞–ª—å–Ω—ñ.")
        return WC_PHOTO

    user_id = update.effective_user.id
    token = get_token(user_id)
    field_name = 'image'

    file = await update.message.photo[-1].get_file()
    file_bytes = await file.download_as_bytearray()
    files = {field_name: ('photo.jpg', file_bytes, 'image/jpeg')}
    headers = {"Authorization": f"Bearer {token}"}

    try:
        resp = requests.post(f"{API_URL}/photo", files=files, headers=headers)
        if not resp.ok:
            await update.message.reply_text(
                f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ: {resp.status_code}\n"
                f"–¢—ñ–ª–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:\n{resp.text}\n"
                f"Raw content:\n{resp.content}"
            )
            return WC_PHOTO
        photo_resp = resp.json()
        photo_uuid = photo_resp.get("draftPhotoId")
        if not photo_uuid:
            await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ UUID —Ñ–æ—Ç–æ.\n–î–æ—Å—Ç—É–ø–Ω—ñ –∫–ª—é—á—ñ: {list(photo_resp.keys())}")
            return WC_PHOTO
        context.user_data['wc_photo_uuid'] = photo_uuid

    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ: {e}")
        return WC_PHOTO

    preview = (
        f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ:\n"
        f"–ù–∞–∑–≤–∞: {context.user_data['wc_name']}\n"
        f"–û–ø–∏—Å: {context.user_data['wc_description']}\n"
        f"–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π: {'—Ç–∞–∫' if context.user_data['wc_isfree'] else '–Ω—ñ'}\n"
        f"–û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ: "
        f"{', '.join(context.user_data['wc_features'].values()) if context.user_data['wc_features'] else '–Ω–µ–º–∞—î'}\n"
        f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {context.user_data['wc_lat']}, {context.user_data['wc_lng']}\n"
        f"–§–æ—Ç–æ: –¥–æ–¥–∞–Ω–æ\n\n"
        f"–í—Å–µ –≤—ñ—Ä–Ω–æ? (‚úÖ –¢–∞–∫ / ‚ùå –ù—ñ)"
    )
    await update.message.reply_text(
        preview,
        reply_markup=ReplyKeyboardMarkup([["‚úÖ –¢–∞–∫", "‚ùå –ù—ñ"]], resize_keyboard=True, one_time_keyboard=True)
    )
    return WC_CONFIRM

async def add_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
        return await cancel(update, context)
    if update.message.text != "‚úÖ –¢–∞–∫":
        context.user_data.clear()
        await update.message.reply_text(
            "–î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_keyboard())
        return ConversationHandler.END

    user_id = update.effective_user.id
    token = get_token(user_id)
    headers = {"Authorization": f"Bearer {token}"}

    data = {
        "name": context.user_data['wc_name'],
        "description": context.user_data['wc_description'],
        "isFree": context.user_data['wc_isfree'],
        "accessibilityFeatures": context.user_data['wc_features'],
        "location": {
            "latitude": context.user_data['wc_lat'],
            "longitude": context.user_data['wc_lng']
        },
        "draftPhotoUuids": [context.user_data['wc_photo_uuid']]
    }

    try:
        resp = requests.post(f"{API_URL}/water-closet", json=data, headers=headers)
        if resp.ok:
            await update.message.reply_text("–í–±–∏—Ä–∞–ª—å–Ω—é —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ! –î—è–∫—É—î–º–æ.", reply_markup=get_main_keyboard())
        else:
            await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è: {resp.status_code} {resp.text}", reply_markup=get_main_keyboard())
    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}", reply_markup=get_main_keyboard())
    context.user_data.clear()
    return ConversationHandler.END

def register(app):
    add_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚ûï –î–æ–¥–∞—Ç–∏$"), add_start)],
        states={
            WC_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_name)],
            WC_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_description)],
            WC_ISFREE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_isfree)],
            WC_FEATURES: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_features)],
            WC_LOCATION: [
                MessageHandler(filters.LOCATION, add_location),
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_location)
            ],
            WC_PHOTO: [MessageHandler(filters.PHOTO, add_photo), MessageHandler(filters.TEXT & ~filters.COMMAND, add_photo)],
            WC_CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_confirm)],
        },
        fallbacks=[MessageHandler(filters.Regex("^‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏$"), cancel)]
    )
    app.add_handler(add_conv)